<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zaorang&#39;s Blog</title>
    <link>https://zaorangyang.github.io/</link>
    <description>Recent content on Zaorang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 10 Aug 2021 19:44:11 +0800</lastBuildDate>
    
	<atom:link href="https://zaorangyang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>无锁编程实践：RocksDB ThreadLocalPtr剖析</title>
      <link>https://zaorangyang.github.io/posts/rocksdb-tls/</link>
      <pubDate>Tue, 10 Aug 2021 19:44:11 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/rocksdb-tls/</guid>
      <description>前言 RocksDB被广泛应用在各种高性能场景中，如何能让向上层提供的接口拥有更小的延迟，是RocksDB一直追求的目标之一。对于一个系统来说，暂时忽略长尾场景，将critical path的时延降低是获</description>
    </item>
    
    <item>
      <title>RocksDB BlockBasedTable源码分析</title>
      <link>https://zaorangyang.github.io/posts/rocksdb-blockbasedtable/</link>
      <pubDate>Fri, 25 Jun 2021 09:35:20 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/rocksdb-blockbasedtable/</guid>
      <description>前言 RockDB将一个SST文件称为一个表，针对业务场景不同，RocksDB提供了多种类型的表，其中BlockBasedTable是默认的并且最常用的表类型。因为BlockBasedTable涉及到R</description>
    </item>
    
    <item>
      <title>RocksDB文件结构</title>
      <link>https://zaorangyang.github.io/posts/rocksdb-table-format/</link>
      <pubDate>Fri, 18 Jun 2021 09:31:29 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/rocksdb-table-format/</guid>
      <description>overview 本文总结于：https://github.com/facebook/rocksdb/wiki/Rocksdb-BlockBasedTable-Format 整体上来说sst文件的结构如下： &amp;lt;beginning_of_file&amp;gt; [data block 1] [data block</description>
    </item>
    
    <item>
      <title>浅谈Raft配置变更(成员变更)策略</title>
      <link>https://zaorangyang.github.io/posts/raft-member-change/</link>
      <pubDate>Sun, 06 Jun 2021 19:20:32 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/raft-member-change/</guid>
      <description>前言 本文参考的文献为: CONSENSUS-BRIDGING THEORY AND PRACTICE。这里所说的配置，是一个raft集群的拓扑。配置变更指的是从当前集群中增加一部分节点或者删除一部分节点。在真实的生产环境中，因为各种原因，节点的上线/下线是</description>
    </item>
    
    <item>
      <title>AC-Key: Adaptive Caching for LSM-based Key-Value Stores论文笔记</title>
      <link>https://zaorangyang.github.io/posts/ackey-paper/</link>
      <pubDate>Mon, 10 May 2021 19:36:21 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/ackey-paper/</guid>
      <description>摘要 总体来说这篇论文受操作系统的ARC缓冲策略的启发，然后结合LSM元素的缓冲效率因子，提出了分层的自适应缓冲算法。该算法管理三种类型的Cache，key-value cache, key-pointer cache, block cache，可以自感知业务</description>
    </item>
    
    <item>
      <title>WiscKey论文阅读</title>
      <link>https://zaorangyang.github.io/posts/wisckey-paper/</link>
      <pubDate>Thu, 06 May 2021 19:20:32 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/wisckey-paper/</guid>
      <description>介绍 由于SSD的几个特性，导致当前的LSM设计不太合理： 随机读写的性能和顺序读写的性能差异在SSD下没有HDD下那么明显 SSD内部有大量的并行机制，LSM并没有好好利用 (为什么说没有好好利用) 写入次数</description>
    </item>
    
    <item>
      <title>RocksDB Compaction源码分析</title>
      <link>https://zaorangyang.github.io/posts/rocksdb-compaction/</link>
      <pubDate>Thu, 06 May 2021 19:00:47 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/rocksdb-compaction/</guid>
      <description>前言 rocksdb有多种compaction策略，默认的compaction策略应该为leveled compaction，我们本次分析leveled compaction机制。本次分析主要涉及到几个问题</description>
    </item>
    
    <item>
      <title>RocksDB LRUCache梳理</title>
      <link>https://zaorangyang.github.io/posts/rocksdb-lrucache/</link>
      <pubDate>Wed, 05 May 2021 19:14:10 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/rocksdb-lrucache/</guid>
      <description>Overview 整体说来，rocksdb对于LRUCache的实现还是比较简单的，和我们平时见到的LRUCache基本一致，核心数据结构包括一个hashtable，用于存放cache所管理的数据，另一个数据结构为一</description>
    </item>
    
    <item>
      <title>RocksDB写流程梳理</title>
      <link>https://zaorangyang.github.io/posts/rocksdb-write-path/</link>
      <pubDate>Sun, 02 May 2021 18:34:33 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/rocksdb-write-path/</guid>
      <description>rocksdb的每次写入都以一个WriteBatch对象为载体，WriteBatch记录了要写入的所有数据。 写入数据的入口函数是：DBImpl::WriteImpl WriteImpl rocksdb将每个将要写入的Wr</description>
    </item>
    
    <item>
      <title>MongoDB跨机房自动failover：并行复制全局锁造成的QPS掉底原因分析与解决</title>
      <link>https://zaorangyang.github.io/posts/mongo-parallel-batch-lock/</link>
      <pubDate>Thu, 23 Jul 2020 17:47:57 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/mongo-parallel-batch-lock/</guid>
      <description>背景 MongoDB是一个分布式数据库，底层数据通过Raft协议复制，原生支持数据强一致性以及分布式事务，支持副本集自动failover。一个典型的MongoDB集群拓扑如下图所示： mongos是代理层</description>
    </item>
    
    <item>
      <title>VIP引起的Mongos Cursor Not Found问题定位与解决方案</title>
      <link>https://zaorangyang.github.io/posts/mongos-cursor-not-found/</link>
      <pubDate>Sun, 17 May 2020 22:47:57 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/mongos-cursor-not-found/</guid>
      <description>现象 业务方反应查询数据时，mongo有时候会报Cursor not found的错误，该错误不只java dirver有出现，对于使用golang的业务，也有反馈: 集群架构如下图所示。LVS采用round-ro</description>
    </item>
    
    <item>
      <title>为什么需要右值引用</title>
      <link>https://zaorangyang.github.io/posts/cpp-lvalue-reference/</link>
      <pubDate>Mon, 30 Dec 2019 14:34:01 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/cpp-lvalue-reference/</guid>
      <description>C++所有表达式和变量要么是左值，要么是右值。 左值表示非临时对象 右值指临时对象，它们只在当前的语句中有效。 在C++11之前，除了用常量引用绑定右值一个右值之外，右值不能被引用： const int &amp;amp;a = 1; 这种情况下，右</description>
    </item>
    
    <item>
      <title>数据库系统实现--并发控制</title>
      <link>https://zaorangyang.github.io/posts/db-system-impl-concurrency-control/</link>
      <pubDate>Sat, 21 Dec 2019 20:03:04 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/db-system-impl-concurrency-control/</guid>
      <description>引言 并发执行的事务之间相互影响，会使数据库处于不一致状态。因此各个事务的每个执行步骤，需要按照某种方式来规范。该规范是由调度器完成的。 事务对数据元素的请求会传递给调度器，调度器决定应该按照什么样的顺序</description>
    </item>
    
    <item>
      <title>数据库系统实现--系统故障对策</title>
      <link>https://zaorangyang.github.io/posts/db-system-impl-system-failure/</link>
      <pubDate>Sat, 14 Dec 2019 15:11:04 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/db-system-impl-system-failure/</guid>
      <description>引言 数据库最重要的目的之一是保证数据的完整性，即使在非常极端的情况下，也要保证数据不丢失。为此，我们考虑两个主要的问题: 系统发生故障时，数据必须受到保护。本次主要讨论支持可恢复性这一目标技术，即系统发</description>
    </item>
    
    <item>
      <title>MongoDB源码编译</title>
      <link>https://zaorangyang.github.io/posts/mongo-compile/</link>
      <pubDate>Fri, 08 Nov 2019 20:11:04 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/mongo-compile/</guid>
      <description>主要参考资料: https://github.com/mongodb/mongo/wiki/Build-Mongodb-From-Source 编译环境：Centos\Ubuntu 依赖 编译master分支，gcc版本需要在8.0以上，编译3.6，gcc版本需要在5.4.0以上 升级的gcc的路径不要装错，否则会出现一些错误，fi</description>
    </item>
    
    <item>
      <title>Raft论文阅读：Raft Basic</title>
      <link>https://zaorangyang.github.io/posts/raft-basic/</link>
      <pubDate>Mon, 21 Oct 2019 08:11:04 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/raft-basic/</guid>
      <description>Raft是一种分布式一致性算法，关于该算法的论文很多，本文参阅的论文为In Search of an Understandable Consensus Algorithm (Extended Version)，该论文对于Raft Basic有很好的讲解，可以作为Raft算法的入门资料，本文还同时参考了MI</description>
    </item>
    
    <item>
      <title>[MySQL Release Notes] MySQL5.7.0翻译</title>
      <link>https://zaorangyang.github.io/posts/changes-in-mysql5.7.0-translate/</link>
      <pubDate>Mon, 17 Jun 2019 19:22:09 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/posts/changes-in-mysql5.7.0-translate/</guid>
      <description>[MySQL Release Notes] MySQL5.7.0翻译 翻译自：https://dev.mysql.com/doc/relnotes/mysql/5.7/en/news-5-7-0.html 诊断记录(Diagnostics Notes) M</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://zaorangyang.github.io/about/me/</link>
      <pubDate>Sun, 23 Aug 1992 09:00:00 +0800</pubDate>
      
      <guid>https://zaorangyang.github.io/about/me/</guid>
      <description>大家好，我的名字是杨凿让。我是一名研发工程师，当前在滴滴基础架构部从事与database和数据存储相关的开发工作。我深爱我从事的领域，认为数字时代的database就像古代的纸和笔。 我平时爱读书，偏爱</description>
    </item>
    
  </channel>
</rss>